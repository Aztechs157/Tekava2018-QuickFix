Only in Tekeva2018/commands: AttackSwap.java
Only in FRC2018/commands: AuotoGroup.java
Only in FRC2018/commands: AuotoGroup.java~
Only in Tekeva2018/commands: Autogroup.java
Only in Tekeva2018/commands: AutonMode0.java
Only in Tekeva2018/commands: AutonMode1.java
Only in Tekeva2018/commands: Autonomous.java
Only in FRC2018/commands: Debug.java
Only in Tekeva2018/commands: DebugInfo.java
Only in FRC2018/commands: DriveLiftWithSticks.java
Only in FRC2018/commands: DriveLiftWithSticks.java~
Only in Tekeva2018/commands: DriveSpeedForDistance.java
Only in Tekeva2018/commands: DriveSpeedForTime.java
Only in Tekeva2018/commands: DriveSwap.java
diff --color -r Tekeva2018/commands/DriveWithSticks.java FRC2018/commands/DriveWithSticks.java
12c12
< package org.usfirst.frc157.Tekeva2018.commands;
---
> package org.usfirst.frc157.FRC2018.commands;
14c14
< import org.usfirst.frc157.Tekeva2018.Robot;
---
> import org.usfirst.frc157.FRC2018.Robot;
Only in Tekeva2018/commands: ElevatorGetTime.java
Only in FRC2018/commands: empty.java
Only in FRC2018/commands: empty.java~
Only in Tekeva2018/commands: ForkliftClose.java
Only in Tekeva2018/commands: ForkLiftController.java
Only in Tekeva2018/commands: ForkliftDown.java
Only in Tekeva2018/commands: ForkliftOpen.java
Only in Tekeva2018/commands: ForkliftUp.java
Only in Tekeva2018/commands: getEncoder.java
Only in FRC2018/commands: grabberMove.java
Only in FRC2018/commands: grabberMove.java~
Only in FRC2018/commands: MoveLiftToPos.java
Only in FRC2018/commands: MoveLiftToPos.java~
Only in Tekeva2018/commands: RaiseElevatorByPercent.java
Only in Tekeva2018/commands: RaiseElevatorForDistance.java
Only in Tekeva2018/commands: RaiseElevatorToPoistion.java
Only in Tekeva2018/commands: RaiseForksByPercent.java
diff --color -r Tekeva2018/OI.java FRC2018/OI.java
1c1
< // RobotBuilder Version: 2.0 
---
> // RobotBuilder Version: 2.0
12c12
< package org.usfirst.frc157.Tekeva2018;
---
> package org.usfirst.frc157.FRC2018;
14c14
< import org.usfirst.frc157.Tekeva2018.commands.*;   
---
> import org.usfirst.frc157.FRC2018.commands.*;
17d16
< import edu.wpi.first.wpilibj.Preferences;
19c18
< import org.usfirst.frc157.Tekeva2018.subsystems.*;
---
> //import org.usfirst.frc157.FRC2018.subsystems.*;
37,46c36
<     public enum ElvPos
<     {
<         GROUND,
<         SWITCH,
<         SCALELOW,
<         SCALEMID,
<         SCALEHIGH,
<         MAX
<     };
<     Preferences prefs;
---
> 
49a40
> 
61a53
> 
63,64d54
<     public JoystickButton r1;
<     public JoystickButton l1;
69,82c59,70
<     public JoystickButton k5;
<     public JoystickButton k6;
<     public JoystickButton k7;
<     public JoystickButton k8;
<     public JoystickButton k9;
<     public JoystickButton select;
<     public JoystickButton start;
<     public JoystickButton ATKL6;
<     public Joystick gamePadController;
<     public Joystick OpBox;
<     public Joystick ArcJoy;
<     public Joystick AttackL;
<     public Joystick AttackR;
< 
---
>     public JoystickButton l2;
>     public JoystickButton r2;
>     public JoystickButton l1;
>     public JoystickButton r1;
>     public JoystickButton sE;
>     public JoystickButton sT;
>     public JoystickButton k11;
>     public JoystickButton k12;
>     public Joystick opBox;
>     public Joystick attackL;
>     public Joystick attackR;
>     public Joystick gamePad;
84,93c72,81
<     public int R2 = 3;
<     public int L2 = 2;
<     public int LYStick = 1;
<     public int RYStick = 5;
<     public int RxStick = 4;
<     public int JoyY = 1;
<     public int Ratk = 1;
<     public int Latk = 1;
<     public int LatkPot = 2;
<     public int RatkPot = 2;
---
>     public static final int R2 = 3;
>     public static final int L2 = 2;
>     public static final int LYStick = 1;
>     public static final int RYStick = 5;
>     public static final int RxStick = 4;
>     public static final int JoyY = 1;
>     public static final int Ratk = 1;
>     public static final int Latk = 1;
>     public static final int LatkPot = 2;
>     public static final int RatkPot = 2;
97c85
<         gamePadController = new Joystick(0);
---
>         gamePad = new Joystick(3);
99,124c87
<         OpBox = new Joystick(1);
<         AttackL = new Joystick(4);
<         AttackR = new Joystick(5);
<         //ArcJoy = new Joystick(2);
<         l1 = new JoystickButton(gamePadController, 5);
<         l1.whileHeld(new ForkliftClose());
<         r1 = new JoystickButton(gamePadController, 6);
<         r1.whileHeld(new ForkliftOpen());
< 
<         k1 = new JoystickButton(OpBox, 1);
<         k1.whileHeld(new ForkliftClose());
<         k2 = new JoystickButton(OpBox, 2);
<         k2.whileHeld(new ForkliftOpen());
<         k3 = new JoystickButton(OpBox, 3);
<         k3.whenPressed(new RaiseElevatorToPoistion(ElvPos.GROUND));
<         k4 = new JoystickButton(OpBox, 4);
<         k4.whenPressed(new RaiseElevatorToPoistion(ElvPos.SWITCH));
<         k5 = new JoystickButton(OpBox, 5);
<         k5.whenPressed(new RaiseElevatorToPoistion(ElvPos.SCALELOW));
<         k6 = new JoystickButton(OpBox, 6);
<         k6.whenPressed(new RaiseElevatorToPoistion(ElvPos.SCALEMID));
<         k7 = new JoystickButton(OpBox, 7);
<         k7.whenPressed(new RaiseElevatorToPoistion(ElvPos.SCALEHIGH));
<         k8 = new JoystickButton(OpBox, 8);
<         k8.whenPressed(new RaiseElevatorToPoistion(ElvPos.MAX));
<         // SmartDashboard Buttons
---
>         attackR = new Joystick(2);
126,133c89,117
<         SmartDashboard.putData("Autonomous Command", new Autogroup());
<         SmartDashboard.putData("DriveWithSticks", new DriveWithSticks());
<         SmartDashboard.putData("ForkliftUp", new ForkliftUp());
<         SmartDashboard.putData("ForkliftDown", new ForkliftDown());
<         SmartDashboard.putData("ForkliftOpen", new ForkliftOpen());
<         SmartDashboard.putData("ForkliftClose", new ForkliftClose());
<         SmartDashboard.putData("USB Camera", new Camera());
<         SmartDashboard.putData("Optical Switch", new ForkliftForks());
---
>         attackL = new Joystick(0);
>         
>         opBox = new Joystick(1);
>         
>         k12 = new JoystickButton(opBox, 12);
>         k12.whileHeld(new empty());
>         k11 = new JoystickButton(opBox, 11);
>         k11.whileHeld(new empty());
>         sT = new JoystickButton(opBox, 10);
>         sT.whenPressed(new Debug());
>         sE = new JoystickButton(opBox, 9);
>         sE.whileHeld(new grabberMove(true));
>         r1 = new JoystickButton(opBox, 8);
>         r1.whileHeld(new grabberMove(false));
>         l1 = new JoystickButton(opBox, 7);
>         l1.whenPressed(new MoveLiftToPos(6));
>         r2 = new JoystickButton(opBox, 6);
>         r2.whenPressed(new MoveLiftToPos(5));
>         l2 = new JoystickButton(opBox, 5);
>         l2.whenPressed(new MoveLiftToPos(4));
>         k4 = new JoystickButton(opBox, 4);
>         k4.whenPressed(new MoveLiftToPos(3));
>         k3 = new JoystickButton(opBox, 3);
>         k3.whenPressed(new MoveLiftToPos(2));
>         k2 = new JoystickButton(opBox, 2);
>         k2.whenPressed(new MoveLiftToPos(1));
>         k1 = new JoystickButton(opBox, 1);
>         k1.whenPressed(new MoveLiftToPos(0));
> 
134a119,132
>         // SmartDashboard Buttons
>         SmartDashboard.putData("AuotoGroup", new AuotoGroup());
>         SmartDashboard.putData("DriveWithSticks", new DriveWithSticks());
>         SmartDashboard.putData("MoveLiftToPos1", new MoveLiftToPos(0));
>         SmartDashboard.putData("MoveLiftToPos2", new MoveLiftToPos(1));
>         SmartDashboard.putData("MoveLiftToPos3", new MoveLiftToPos(2));
>         SmartDashboard.putData("MoveLiftToPos4", new MoveLiftToPos(3));
>         SmartDashboard.putData("MoveLiftToPos5", new MoveLiftToPos(4));
>         SmartDashboard.putData("MoveLiftToPos6", new MoveLiftToPos(5));
>         SmartDashboard.putData("MoveLiftToPos7", new MoveLiftToPos(6));
>         SmartDashboard.putData("grabberMoveIn", new grabberMove(true));
>         SmartDashboard.putData("grabberMoveOut", new grabberMove(false));
>         SmartDashboard.putData("DriveLiftWithSticks", new DriveLiftWithSticks());
>         SmartDashboard.putData("empty", new empty());
136,142c134
<         // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
<         start = new JoystickButton(gamePadController, 8);
<         start.whenPressed(new DebugInfo());
<         select = new JoystickButton(gamePadController, 7);
<         select.whenPressed(new DriveSwap());
<         ATKL6 = new JoystickButton(AttackL, 6);
<         ATKL6.whenPressed(new AttackSwap());
---
>     // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
146,147c138,139
<     public Joystick getGamePadController() {
<         return gamePadController;
---
>     public Joystick getopBox() {
>         return opBox;
149,151c141,143
<     public Joystick OpBox()
<     {
<      return OpBox;
---
> 
>     public Joystick getattackL() {
>         return attackL;
154,156c146,147
<     public Joystick getAttackL()
<     {
<         return AttackL;
---
>     public Joystick getattackR() {
>         return attackR;
158,160c149,151
<     public Joystick getAttackR ()
<     {
<         return AttackR;
---
> 
>     public Joystick getgamePad() {
>         return gamePad;
161a153,154
> 
> 
Only in FRC2018/: OI.java~
diff --color -r Tekeva2018/PID.java FRC2018/PID.java
1c1
< package org.usfirst.frc157.Tekeva2018;
---
> package org.usfirst.frc157.FRC2018;
4d3
< import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
28,30d26
<         SmartDashboard.putNumber("P", this.p);
<         SmartDashboard.putNumber("I", this.i);
<         SmartDashboard.putNumber("D", this.d);
Only in FRC2018/: README.md
diff --color -r Tekeva2018/Robot.java FRC2018/Robot.java
12c12
< package org.usfirst.frc157.Tekeva2018;
---
> package org.usfirst.frc157.FRC2018;
14c14
< import edu.wpi.first.wpilibj.TimedRobot;  
---
> import edu.wpi.first.wpilibj.TimedRobot;
16d15
< import edu.wpi.first.wpilibj.command.CommandGroup;
18c17
< import edu.wpi.first.wpilibj.livewindow.LiveWindow;
---
> //import edu.wpi.first.wpilibj.livewindow.LiveWindow;
21,22c20,21
< import org.usfirst.frc157.Tekeva2018.commands.*;
< import org.usfirst.frc157.Tekeva2018.subsystems.*;
---
> import org.usfirst.frc157.FRC2018.commands.*;
> import org.usfirst.frc157.FRC2018.subsystems.*;
37a37,38
>     //public static Platform platform;
>     public static Lift lift;
39,40c40
<     public static ForkliftForks forkliftForks;
<     public static ForkliftElevator forkliftElevator;
---
>     public static Grabber grabber;
51a52,53
>         //platform = new Platform();
>         lift = new Lift();
53,55c55
<         forkliftForks = new ForkliftForks();
<         forkliftElevator = new ForkliftElevator();
<         autonomousCommand = new Autogroup();
---
>         grabber = new Grabber();
57c57
<         // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
---
>     // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
67,72c67
<         //chooser.addObject("Autonomous Command", new Autogroup());
<         chooser.addDefault("Autonomous Command", new Autogroup());
< 
<         // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
<         SmartDashboard.putData("Autonomous Command", chooser);
<         //autonomousCommand = new Autogroup();
---
>         chooser.addDefault("AuotoGroup", new AuotoGroup());
73a69,70
>     // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
>         SmartDashboard.putData("Auto mode", chooser);
88a86
> 
93,98c91
<         // Starts the autonomous command
<         if (autonomousCommand != null)
<         {
<             autonomousCommand.start();
<         }
< 
---
>         if (autonomousCommand != null) autonomousCommand.start();
115,118c108
<         if (autonomousCommand != null)
<         {
<             autonomousCommand.cancel();
<         }
---
>         if (autonomousCommand != null) autonomousCommand.cancel();
Only in FRC2018/: Robot.java~
diff --color -r Tekeva2018/RobotMap.java FRC2018/RobotMap.java
12c12
< package org.usfirst.frc157.Tekeva2018;
---
> package org.usfirst.frc157.FRC2018;
14c14
< // Auto generated imports
---
> // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
16d15
< 
18,19d16
< import edu.wpi.first.wpilibj.AnalogPotentiometer;
< import edu.wpi.first.wpilibj.BuiltInAccelerometer;
25,26c22
< // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
< import edu.wpi.first.wpilibj.interfaces.Accelerometer;
---
>     // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
36,59c32,49
<     // Talon Decelerations
<     public static WPI_TalonSRX driveDriveLeft1;
<     public static WPI_TalonSRX driveDriveLeft2;
<     public static WPI_TalonSRX driveDriveRight1;
<     public static WPI_TalonSRX driveDriveRight2;
<     public static WPI_TalonSRX forkliftForksForkMotor;
<     public static WPI_TalonSRX ElevatorMotor;
< 
<     // Encoder Decleration
<     public static Encoder driveLeftQuad;
<     public static Encoder driveRightQuad;
<     public static Encoder forkEncoder;
< 
<     // Digital Input/Output (DIO) Decleration
<     public static DigitalInput forkliftElevatorHighSwitch;
<     public static DigitalInput forkliftElevatorLowSwitch;
<     public static DigitalInput forkliftForksOpenSwitch;
<     public static DigitalInput forkliftForksCloseSwitch;
<     public static DigitalInput OpticalSwitch;
< 
<     // Analog Decelerations
<     public static AnalogGyro gyroAnalogGyro1;
<     public static AnalogPotentiometer motorControllerTeAnalogPotentiometer;
<     public static AnalogPotentiometer autoSelect;
---
>     // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
>     public static WPI_TalonSRX platformplatformTalon;
>     public static Encoder platformplatformQuad;
>     public static DigitalInput platformplatformTopLimit;
>     public static DigitalInput platformplatformBottomLimit;
>     public static Encoder extensioncarriageQuad;
>     public static WPI_TalonSRX extensionextensionTalon;
>     public static DigitalInput extensionextensionTopLimit;
>     public static DigitalInput extensionextensionBottomLimit;
>     public static WPI_TalonSRX drivedriveRight1;
>     public static WPI_TalonSRX drivedriveRight2;
>     public static WPI_TalonSRX drivedriveLeft1;
>     public static WPI_TalonSRX drivedriveLeft2;
>     public static Encoder drivedriveRightQuad;
>     public static Encoder drivedriveLeftQuad;
>     public static AnalogGyro drivedriveGyro;
>     public static WPI_TalonSRX grabberIntakeRightTalon;
>     public static WPI_TalonSRX grabberintakeLeftTalon;
61,62c51
<     //Accelerometer Declerartion
<     public static Accelerometer accel;
---
>     // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
63a53
>     @SuppressWarnings("deprecation")
65,101c55,112
<         // Gyro Reader
<         gyroAnalogGyro1 = new AnalogGyro(0);
<         gyroAnalogGyro1.setSensitivity(0.007);
< 
<         // Accelerometer Pin
<         accel = new BuiltInAccelerometer(Accelerometer.Range.k4G);
< 
<         // Wheel Encoder Pins
<         driveLeftQuad = new Encoder(1, 2, true, EncodingType.k4X);
<         driveLeftQuad.setDistancePerPulse(0.05); // (0.5) for in.
<         driveLeftQuad.setPIDSourceType(PIDSourceType.kRate);
<         driveRightQuad = new Encoder(3, 4, false, EncodingType.k4X);
<         driveRightQuad.setDistancePerPulse(0.05); // (0.5) for in.s
<         driveRightQuad.setPIDSourceType(PIDSourceType.kRate);
< 
<         // Fork Encoder Pins
<         forkEncoder = new Encoder (10, 5, true, EncodingType.k4X);
<         forkEncoder.setDistancePerPulse(0.03735353664); // (0.01867676832) For in.
< 
<         // Set Talon IDS
<         driveDriveLeft1 = new WPI_TalonSRX(11);
<         driveDriveLeft2 = new WPI_TalonSRX(9);
<         driveDriveRight1 = new WPI_TalonSRX(2);
<         driveDriveRight2 = new WPI_TalonSRX(3);
<         forkliftForksForkMotor = new WPI_TalonSRX(6);
<         ElevatorMotor = new WPI_TalonSRX(1);
< 
<         // Set DIO IDS
<         OpticalSwitch = new DigitalInput(0); //TODO CHANGE 9 TO DIO ON NEW ROBOT
<         forkliftForksOpenSwitch = new DigitalInput(7);
<         forkliftForksCloseSwitch = new DigitalInput(6);
<         forkliftElevatorHighSwitch = new DigitalInput(9);
<         forkliftElevatorLowSwitch = new DigitalInput(8);
< 
<         // Set Analog IDS
<         motorControllerTeAnalogPotentiometer = new AnalogPotentiometer(1, 1.0, 0.0); // (Pin, Scale, Offset)
<         autoSelect = new AnalogPotentiometer(2, 5.5, -11);
---
>         // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
>         platformplatformTalon = new WPI_TalonSRX(6);
>         
>         
>         platformplatformQuad = new Encoder(0, 1, false, EncodingType.k4X);
>         LiveWindow.addSensor("Platform", "platformQuad", platformplatformQuad);
>         platformplatformQuad.setDistancePerPulse(0.0625);//0.02
>         platformplatformQuad.setPIDSourceType(PIDSourceType.kRate);
>         platformplatformTopLimit = new DigitalInput(6);
>         LiveWindow.addSensor("Platform", "platformTopLimit", platformplatformTopLimit);
>         
>         platformplatformBottomLimit = new DigitalInput(7);
>         LiveWindow.addSensor("Platform", "platformBottomLimit", platformplatformBottomLimit);
>         
>         extensioncarriageQuad = new Encoder(2, 3, false, EncodingType.k4X);
>         LiveWindow.addSensor("Extension", "carriageQuad", extensioncarriageQuad);
>         extensioncarriageQuad.setDistancePerPulse(0.025);//0.01
>         extensioncarriageQuad.setPIDSourceType(PIDSourceType.kRate);
>         extensionextensionTalon = new WPI_TalonSRX(7);
>         
>         
>         extensionextensionTopLimit = new DigitalInput(12);
>         LiveWindow.addSensor("Extension", "extensionTopLimit", extensionextensionTopLimit);
>         
>         extensionextensionBottomLimit = new DigitalInput(13);
>         LiveWindow.addSensor("Extension", "extensionBottomLimit", extensionextensionBottomLimit);
>         
>         drivedriveRight1 = new WPI_TalonSRX(1);
>         
>         
>         drivedriveRight2 = new WPI_TalonSRX(2);
>         
>         
>         drivedriveLeft1 = new WPI_TalonSRX(8);
>         
>         
>         drivedriveLeft2 = new WPI_TalonSRX(9);
>         
>         
>         drivedriveRightQuad = new Encoder(14, 15, false, EncodingType.k4X);
>         LiveWindow.addSensor("Drive", "driveRightQuad", drivedriveRightQuad);
>         drivedriveRightQuad.setDistancePerPulse(0.052333);
>         drivedriveRightQuad.setPIDSourceType(PIDSourceType.kRate);
>         drivedriveLeftQuad = new Encoder(16, 17, false, EncodingType.k4X);
>         LiveWindow.addSensor("Drive", "driveLeftQuad", drivedriveLeftQuad);
>         drivedriveLeftQuad.setDistancePerPulse(0.052333);
>         drivedriveLeftQuad.setPIDSourceType(PIDSourceType.kRate);
>         drivedriveGyro = new AnalogGyro(0);
>         LiveWindow.addSensor("Drive", "driveGyro", drivedriveGyro);
>         drivedriveGyro.setSensitivity(0.007);
>         grabberIntakeRightTalon = new WPI_TalonSRX(3);
>         
>         
>         grabberintakeLeftTalon = new WPI_TalonSRX(4);
>         
>         
> 
>     // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
Only in FRC2018/: RobotMap.java~
Only in Tekeva2018/subsystems: Camera.java
diff --color -r Tekeva2018/subsystems/Drive.java FRC2018/subsystems/Drive.java
12c12
< package org.usfirst.frc157.Tekeva2018.subsystems;
---
> package org.usfirst.frc157.FRC2018.subsystems;
14c14
< import java.text.DecimalFormat ; 
---
> import org.usfirst.frc157.FRC2018.OI;
16,21c16,20
< import org.usfirst.frc157.Tekeva2018.Robot;
< import org.usfirst.frc157.Tekeva2018.RobotMap;
< import org.usfirst.frc157.Tekeva2018.commands.*;
< import edu.wpi.first.wpilibj.command.Subsystem;
< import edu.wpi.first.wpilibj.interfaces.Accelerometer;
< import org.usfirst.frc157.Tekeva2018.OI;
---
> //import java.text.DecimalFormat ; 
> 
> import org.usfirst.frc157.FRC2018.Robot;
> import org.usfirst.frc157.FRC2018.RobotMap;
> import org.usfirst.frc157.FRC2018.commands.DriveWithSticks;
24c23
< import com.ctre.phoenix.motorcontrol.NeutralMode;
---
> //import com.ctre.phoenix.motorcontrol.NeutralMode;
27c26,27
< import edu.wpi.first.wpilibj.CounterBase.EncodingType;
---
> 
> //import edu.wpi.first.wpilibj.CounterBase.EncodingType;
29c29
< import edu.wpi.first.wpilibj.AnalogPotentiometer;
---
> //import edu.wpi.first.wpilibj.AnalogPotentiometer;
31,33c31,34
< import edu.wpi.first.wpilibj.PIDSourceType;
< 
< // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
---
> //import edu.wpi.first.wpilibj.PIDSourceType;
> import edu.wpi.first.wpilibj.command.Subsystem;
> //import edu.wpi.first.wpilibj.interfaces.Accelerometer;
> //import org.usfirst.frc157.FRC2018.OI;
49,54c50,55
<     private final Encoder leftQuad = RobotMap.driveLeftQuad;
<     private final Encoder rightQuad = RobotMap.driveRightQuad;
<     private final WPI_TalonSRX driveLeft1 = RobotMap.driveDriveLeft1;
<     private final WPI_TalonSRX driveLeft2 = RobotMap.driveDriveLeft2;
<     private final WPI_TalonSRX driveRight1 = RobotMap.driveDriveRight1;
<     private final WPI_TalonSRX driveRight2 = RobotMap.driveDriveRight2;
---
>     private final Encoder leftQuad = RobotMap.drivedriveLeftQuad;
>     private final Encoder rightQuad = RobotMap.drivedriveRightQuad;
>     private final WPI_TalonSRX driveLeft1 = RobotMap.drivedriveLeft1;
>     private final WPI_TalonSRX driveLeft2 = RobotMap.drivedriveLeft2;
>     private final WPI_TalonSRX driveRight1 = RobotMap.drivedriveRight1;
>     private final WPI_TalonSRX driveRight2 = RobotMap.drivedriveRight2;
56,59c57,59
<     private final Accelerometer accel = RobotMap.accel;
<     private final AnalogGyro gyro = RobotMap.gyroAnalogGyro1;
<     private final AnalogPotentiometer analogPotentiometer = RobotMap.motorControllerTeAnalogPotentiometer;
<     private final AnalogPotentiometer potentiometer = RobotMap.autoSelect;
---
>     //private final Accelerometer accel = RobotMap.accel;
>     private final AnalogGyro gyro = RobotMap.drivedriveGyro;
>     //private final AnalogPotentiometer analogPotentiometer = RobotMap.motorControllerTeAnalogPotentiometer;
86c86
<         double potentiometer = .5; //analogPotentiometer.get();
---
>         double potentiometer = 1;//analogPotentiometer.get();
92,93c92,93
<         double left = Robot.oi.getGamePadController().getRawAxis(Robot.oi.RYStick) * potentiometer;
<         double right = -Robot.oi.getGamePadController().getRawAxis(Robot.oi.LYStick ) * potentiometer;
---
>         double left = Robot.oi.getgamePad().getRawAxis(OI.RYStick) * potentiometer;
>         double right = -Robot.oi.getgamePad().getRawAxis(OI.LYStick ) * potentiometer;
98,100c98,100
<                 double RatkPot = Robot.oi.getAttackR().getRawAxis(Robot.oi.RatkPot);
<                 double Latk = -Robot.oi.getAttackL().getRawAxis(Robot.oi.Latk) * (RatkPot * potentiometer);
<                 double Ratk = Robot.oi.getAttackR().getRawAxis(Robot.oi.Ratk) * (RatkPot * potentiometer);
---
>                 double RatkPot = Robot.oi.getattackR().getRawAxis(OI.RatkPot);
>                 double Latk = -Robot.oi.getattackL().getRawAxis(OI.Latk) * (RatkPot * potentiometer);
>                 double Ratk = Robot.oi.getattackR().getRawAxis(OI.Ratk) * (RatkPot * potentiometer);
112c112
<             double RxDrive = Robot.oi.getGamePadController().getRawAxis(Robot.oi.RxStick) * potentiometer;
---
>             double RxDrive = Robot.oi.getgamePad().getRawAxis(OI.RxStick) * potentiometer;
139c139
<     public double[] getAccelerometer()
---
>     /*public double[] getAccelerometer()
142c142
<     }
---
>     }*/
Only in Tekeva2018/subsystems: ForkliftElevator.java
Only in Tekeva2018/subsystems: ForkliftForks.java
Only in FRC2018/subsystems: Grabber.java
Only in FRC2018/subsystems: Lift.java
Only in Tekeva2018/subsystems: PathManager.java
Only in Tekeva2018/subsystems: Point.java
